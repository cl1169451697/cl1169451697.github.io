[{"title":"mock","date":"2020-07-17T12:39:34.000Z","path":"2020/07/17/mock/","text":"先安装 mock.jsnpm install mockjs –save-dev 模拟数据接口在项目的src目录下创建一个mock目录，然后在里面新建一个index.js文件，作为mock的导出点，用于提供给src/main.js使用。在src/mock下新建modules目录，里面再新建各种xxx.js，用来模拟各个页面的数据。 src目录结构图: index.js代码: 12345678910111213141516&#x2F;&#x2F; 引入mockjsimport Mock from &#39;mockjs&#39;&#x2F;&#x2F; 引入模板函数类import ratings from &#39;.&#x2F;modules&#x2F;ratings&#39;&#x2F;&#x2F; Mock函数const &#123; mock &#125; &#x3D; Mock&#x2F;&#x2F; 设置延时Mock.setup(&#123; timeout: 400&#125;)&#x2F;&#x2F; 使用拦截规则拦截命中的请求，mock(url, post&#x2F;get, 返回的数据);mock(&#x2F;\\&#x2F;api\\&#x2F;ratings\\&#x2F;list&#x2F;, &#39;post&#39;, ratings.list)&#x2F;&#x2F; mock(&#x2F;\\&#x2F;api\\&#x2F;ratings\\&#x2F;list&#x2F;, &#39;get&#39;, ratings.list) ratings.js代码:123456789101112131415161718192021222324&#x2F;&#x2F; 引入随机函数import &#123; Random &#125; from &#39;mockjs&#39;&#x2F;&#x2F; 引入Mockconst Mock &#x3D; require(&#39;mockjs&#39;)&#x2F;&#x2F; 定义数据const listData &#x3D; Mock.mock(&#123; &#39;data|20&#39;: [&#123; username: () &#x3D;&gt; Random.cname(), time: () &#x3D;&gt; Random.date(&#39;yyyy.M.d&#39;), content: () &#x3D;&gt; Random.csentence(5, 10) &#125;]&#125;)function list (res) &#123; &#x2F;&#x2F; res是一个请求对象，包含: url, type, body return &#123; code: 200, data: listData.data, message: &#39;请求成功&#39; &#125;&#125;export default &#123; list &#125; mockjs使用Random方法生成随机数据的规则 官方文档 main.js中引入模拟数据接口:在 src/main.js 中需要加入以下代码 1import &#39;@&#x2F;mock&#39; 安装axios npm install axios main.js中引入axios 123import axios from &#39;axios&#39;&#x2F;&#x2F; 配置axios 到原型中Vue.prototype.$axios &#x3D; axios main.js完整代码: 12345678910111213141516import Vue from &#39;vue&#39;import App from &#39;.&#x2F;App.vue&#39;import router from &#39;.&#x2F;router&#39;import store from &#39;.&#x2F;store&#39;import axios from &#39;axios&#39;import &#39;@&#x2F;mock&#39;Vue.prototype.$axios &#x3D; axiosVue.config.productionTip &#x3D; falsenew Vue(&#123; router, store, render: h &#x3D;&gt; h(App)&#125;).$mount(&#39;#app&#39;) 页面使用: 打印数据:","tags":[{"name":"mock","slug":"mock","permalink":"https://github.com/cl1169451697/cl1169451697.github.io/tags/mock/"}]},{"title":"computed 和 watch","date":"2020-07-15T13:52:57.000Z","path":"2020/07/15/初次/","text":"computed:计算属性，依赖其它属性值，并且 computed 的值有缓存，只有它依赖的属性值发生改变，下一次获取 computed 的值时才会重新计算 computed 的值； watch:监听器:更多的是「观察」的作用，类似于某些数据的监听回调 ，每当监听的数据变化时都会执行回调进行后续操作；","tags":[{"name":"computed | watch","slug":"computed-watch","permalink":"https://github.com/cl1169451697/cl1169451697.github.io/tags/computed-watch/"}]},{"title":"hexo基本配置","date":"2020-07-14T15:31:25.000Z","path":"2020/07/14/打开/","text":"hexo文档https://hexo.bootcss.com/docs/ 安装hexo:1npm install -g hexo-cli 初始化:1hexo init blog 启动:1hexo s 生成文件1hexo g 更新仓库1hexo d 清除缓存:1hexo clean 关联git:1cnpm install --save hexo-deployer-git 配置config文件:123type: gitrepo: https:&#x2F;&#x2F;gitee.com&#x2F;cl1169451697&#x2F;chenlong.gitbranch: master 配置_config文件12root: chenlong.giturl: https:&#x2F;&#x2F;gitee.com&#x2F;cl1169451697&#x2F;chenlong.git 常用博客样式:12https:&#x2F;&#x2F;github.com&#x2F;litten&#x2F;hexo-theme-yiliagit clone https:&#x2F;&#x2F;gitee.com&#x2F;cl1169451697&#x2F;hexo-theme-BlueLake.git themes&#x2F;yilia 修改_config.yml:themes: 设置为下载的主题名字 创建笔记1hexo new &quot;记录&quot; 参数1234title: BlueLake博客主题的详细配置tags: [hexo,BlueLake] &#x2F;&#x2F; 标签categories: Hexo博客折腾 &#x2F;&#x2F; 分类top: true &#x2F;&#x2F; 置顶","tags":[]},{"title":"Hello World","date":"2020-07-14T12:08:21.546Z","path":"2020/07/14/hello-world/","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","tags":[]}]