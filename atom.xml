<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Chen的博客</title>
  
  <subtitle>Pain is inevitable. Suffering is optional. 痛苦不可避免，但可以选择是否受苦。</subtitle>
  <link href="/cl1169451697.github.io/atom.xml" rel="self"/>
  
  <link href="https://github.com/cl1169451697/cl1169451697.github.io/"/>
  <updated>2020-07-20T16:15:19.380Z</updated>
  <id>https://github.com/cl1169451697/cl1169451697.github.io/</id>
  
  <author>
    <name>CL</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>js高级总结</title>
    <link href="https://github.com/cl1169451697/cl1169451697.github.io/2020/07/20/js%E9%AB%98%E7%BA%A7%E6%80%BB%E7%BB%93/"/>
    <id>https://github.com/cl1169451697/cl1169451697.github.io/2020/07/20/js%E9%AB%98%E7%BA%A7%E6%80%BB%E7%BB%93/</id>
    <published>2020-07-20T15:41:47.033Z</published>
    <updated>2020-07-20T16:15:19.380Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\cl1169451697.github.io\assets\css\APlayer.min.css"><script src="\cl1169451697.github.io\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h5 id="注意"><a href="#注意" class="headerlink" title="注意:"></a>注意:</h5><p>*() :括号左边都是   函数;</p><p>*.  :点的左边是  对象;</p><h5 id="1-在js调用函数时传递变量参数时-是值传递还是引用传递"><a href="#1-在js调用函数时传递变量参数时-是值传递还是引用传递" class="headerlink" title="1.在js调用函数时传递变量参数时, 是值传递还是引用传递"></a>1.在js调用函数时传递变量参数时, 是值传递还是引用传递</h5><p>理解1: 都是值(基本值/地址值)传递</p><p>理解2: 可能是值传递, 也可能是引用传递(地址值)</p><p>因为传递的都是值传递,  但是这个值是个—–&gt;地址值</p><h5 id="2-js如何管理内存"><a href="#2-js如何管理内存" class="headerlink" title="2.js如何管理内存"></a>2.js如何管理内存</h5><p>释放内存:</p><p>局部变量:  函数执行自动释放:</p><p>对象:   成为垃圾对象===&gt;垃圾回收器回收</p><h5 id="3-什么是对象"><a href="#3-什么是对象" class="headerlink" title="3.什么是对象?"></a>3.什么是对象?</h5><p>多个数据的封装体</p><p>用来保存多个数据的容器</p><p>一个对象代表现实中一个事物</p><h5 id="3-1为什么使用对象"><a href="#3-1为什么使用对象" class="headerlink" title="3.1为什么使用对象?"></a>3.1为什么使用对象?</h5><p>统一管理多个数据</p><h5 id="3-2对象的组成"><a href="#3-2对象的组成" class="headerlink" title="3.2对象的组成?"></a>3.2对象的组成?</h5><p>1.属性:  属性名(字符串)和 属性值(任意类型)组成===&gt;代表现实事物的状态数据</p><p>2.方法:  一种特别的属性(属性值是函数)====&gt;代表现实事物的行为数据</p><h5 id="3-3如何访问对象内部数据"><a href="#3-3如何访问对象内部数据" class="headerlink" title="3.3如何访问对象内部数据?"></a>3.3如何访问对象内部数据?</h5><p>*.属性名</p><p>*[‘属性名’]==属性名包含特殊字符,  变量名不确定===&gt;使用</p><h5 id="4-什么是函数-函数声明，也叫具名函数"><a href="#4-什么是函数-函数声明，也叫具名函数" class="headerlink" title="4.什么是函数?  函数声明，也叫具名函数"></a>4.什么是函数?  函数声明，也叫具名函数</h5><p>*实现特定功能的多条语句的封装体</p><p>*只有函数是可以执行的, 其他类型的数据不能执行</p><p>*所有函数都是大写Function的实例(对象)</p><h5 id="什么是命名函数"><a href="#什么是命名函数" class="headerlink" title="什么是命名函数?"></a>什么是命名函数?</h5><p>function fn() {} 也叫自定义函数,声明函数;有函数提升</p><h5 id="什么是匿名函数"><a href="#什么是匿名函数" class="headerlink" title="什么是匿名函数?"></a>什么是匿名函数?</h5><p>var fun = function() {} 也叫表达式函数,有变量提升</p><h5 id="4-1为什么使用函数"><a href="#4-1为什么使用函数" class="headerlink" title="4.1为什么使用函数?"></a>4.1为什么使用函数?</h5><p>*提高代码复用</p><p>*便于阅读交流</p><h5 id="4-2如何创建函数"><a href="#4-2如何创建函数" class="headerlink" title="4.2如何创建函数?"></a>4.2如何创建函数?</h5><p>*函数声明 function fn(){}</p><p>*表达式声明 var fn = function(){}</p><p>*区别:</p><p>*函数声明:     整体会被提升到当前作用域的顶部</p><p><em>函数表达式   也提升到顶部但是只有其*</em>变量名**提升</p><p>如果有两个同名的函数;一个是表达式,一个是声明:</p><p>首先: 会把var提升到最上面,其次把声明函数提到上面,然后</p><h5 id="4-3调用方式"><a href="#4-3调用方式" class="headerlink" title="4.3调用方式?"></a>4.3调用方式?</h5><p>*test():  直接调用<br>*obj.test():  通过对象调用<br>*new test():  new调用<br>*test.call / apply(obj) ===&gt;改变this指向, 让一个函数成为指定任意对象的方法进行调用</p><h5 id="4-4什么是回调函数"><a href="#4-4什么是回调函数" class="headerlink" title="4.4什么是回调函数?"></a>4.4什么是回调函数?</h5><p>1).你定义的<br>2).你没有调用<br>3).但最终它执行了(在某个时刻,或者某个条件)</p><h5 id="4-5常见的回调函数"><a href="#4-5常见的回调函数" class="headerlink" title="4.5常见的回调函数?"></a>4.5常见的回调函数?</h5><p>*dom事件回调函数<br>*定时器回调函数    ===&gt;用户交互<br>*ajax回调函数    ===&gt;后台交互<br>*生命周期回调函数</p><h5 id="4-5匿名执行函数-立即执行函数-IIFE"><a href="#4-5匿名执行函数-立即执行函数-IIFE" class="headerlink" title="4.5匿名执行函数 ===立即执行函数====IIFE"></a>4.5匿名执行函数 ===立即执行函数====IIFE</h5><p>(function(){</p><p>console.log(‘立即执行我’)</p><p>)()</p><h5 id="4-6匿名函数-this指向window"><a href="#4-6匿名函数-this指向window" class="headerlink" title="4.6匿名函数:  this指向window"></a>4.6匿名函数:  this指向window</h5><p>return function(){</p><p>return this.name // 这里指向window</p><p>}</p><h5 id="4-7什么是高阶函数"><a href="#4-7什么是高阶函数" class="headerlink" title="4.7什么是高阶函数?"></a>4.7什么是高阶函数?</h5><p>对其他函数进行操作的函数,它接收函数作为参数或将函数作为返回值输出</p><h5 id="作用"><a href="#作用" class="headerlink" title="作用:"></a>作用:</h5><p>*隐藏实现 ===&gt;局部实现<br>*不会污染外部(全局)空间<br>*用它来编写js模块</p><h5 id="5-this是什么"><a href="#5-this是什么" class="headerlink" title="5.this是什么?"></a>5.this是什么?</h5><p>*任何函数本质上都是通过某个对象来调用的, 如果没有直接指定就是 window<br>*所有函数内部都有一个变量this<br>*它的值是调用函数的当前对象 </p><h5 id="5-1如何确定this的值"><a href="#5-1如何确定this的值" class="headerlink" title="5.1如何确定this的值?"></a>5.1如何确定this的值?</h5><p>*test():      window<br>*p.test():     p<br>*new test():       实例化的对象<br>*p.call(obj):    obj</p><h5 id="5-2如何改变this指向"><a href="#5-2如何改变this指向" class="headerlink" title="5.2如何改变this指向?"></a>5.2如何改变this指向?</h5><p>1.)函数.call         会调用函数,  可以改变this的指向(继承属性)<br>2.).函数.apply    改变this指向和调动函数<br>3.).bind     不会调用函数,可以改变this(返回一个新函数)***用的多,因为他不用绑定函数;<br>(用于验证码点击禁用)</p><h5 id="6-原型链"><a href="#6-原型链" class="headerlink" title="6.原型链:"></a>6.原型链:</h5><p>*所有函数.prototype对象 ===都是指着===&gt;Object.prototype; 但是Obeject函数除外</p><p>*所有函数._ <em>proto</em> _===都是指着===&gt;Funciton.prototype;</p><p>*但是大写的Function函数:  的显示原型和隐式原型都指向 ===&gt;Function.prototype</p><p>*Function的new是自生产的</p><p>*Function.prototype     == ._ <em>_proto</em> _ _ <em>==&gt; Object.prototype ==</em>   ._ _ <em>proto</em> _ _ =&gt; null</p><p>*实例对象的隐式原型 === 构造函数的显示原型</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">(Object.prototype &#x3D;&#x3D;&#x3D; Function.prototype.__proto__);&#x2F;&#x2F;true</span><br><span class="line">(Function.prototype &#x3D;&#x3D;&#x3D; Object.__proto__);&#x2F;&#x2F;true</span><br></pre></td></tr></table></figure><h5 id="7-执行上下文"><a href="#7-执行上下文" class="headerlink" title="7.执行上下文:"></a>7.执行上下文:</h5><p>1.全局上下文:</p><p>2.函数上下文</p><h5 id="8-变量提升和函数提升"><a href="#8-变量提升和函数提升" class="headerlink" title="8.变量提升和函数提升"></a>8.变量提升和函数提升</h5><p>变量先提升,然后函数提升, 变量提升的是var, 函数提升的整个函数体;</p><p>函数的优先权是最高的，它永远被提升至作用域最顶部，然后才是函数表达式和变量按顺序执行</p><p>先看声明函数 ,再看 表达式函数,如果同名 ,表达式函数会把 声明函数覆盖!!!</p><p>在定义的函数名字和变量名相同的情况下，函数提升优先级高于变量的例子</p><p><img src="../../../../img/6.png" alt="image"></p><h5 id="8-1作用域和作用域链"><a href="#8-1作用域和作用域链" class="headerlink" title="8.1作用域和作用域链?"></a>8.1作用域和作用域链?</h5><p>作用域分为: 全局区域和函数区域;</p><p>作用:  隔离变量,可以在不同的作用域定义相同名称的变量不冲突;</p><p>作用域链:嵌套,可以用来查找变量,由内像外找,没找到就返回,找不到返回undefined</p><h5 id="9-什么是闭包"><a href="#9-什么是闭包" class="headerlink" title="9.什么是闭包?"></a>9.什么是闭包?</h5><p>说法1:)  内部函数引用了外部函数的<strong>变量时</strong>–就会产生闭包</p><p>说法2 :)包含被引用变量(函数)的对象; 被引用的那个变量的函数就是闭包函数</p><p>调试方法:   使用谷歌浏览器查看Scope</p><p>**注意:  闭包存在于嵌套函数的内部数据中</p><h5 id="9-产生闭包的条件"><a href="#9-产生闭包的条件" class="headerlink" title="9.产生闭包的条件?"></a>9.产生闭包的条件?</h5><p>函数嵌套</p><p>内部函数引用了外部函数的数据(<strong>变量</strong>/ <strong>函数</strong>)</p><h5 id="9-1什么时候会产生闭包"><a href="#9-1什么时候会产生闭包" class="headerlink" title="9.1什么时候会产生闭包?"></a>9.1什么时候会产生闭包?</h5><p>执行函数定义就会产生闭包(不用调用内部函数),</p><p>函数定义是指: 执行了函数体但是没有  调用执行</p><h5 id="9-1闭包的作用"><a href="#9-1闭包的作用" class="headerlink" title="9.1闭包的作用?"></a>9.1闭包的作用?</h5><p>1.) 使得函数内部的变量在函数执行完后, 仍然存活在内存中(延长了局部变量的生命周期)<br>2.)让函数外部可以操作(读写)到函数内部的数据(变量 / 函数)<br>3.)延伸了变量的作用范围</p><h5 id="9-2-函数执行完后-函数内部声明的局部变量是否还存在"><a href="#9-2-函数执行完后-函数内部声明的局部变量是否还存在" class="headerlink" title="9.2.函数执行完后, 函数内部声明的局部变量是否还存在?"></a>9.2.函数执行完后, 函数内部声明的局部变量是否还存在?</h5><p>一般是不存在的,因为函数已经结束了,存在闭包中的变量才可能存在;</p><h5 id="9-3函数外部可以直接访问函数内部的局部变量吗"><a href="#9-3函数外部可以直接访问函数内部的局部变量吗" class="headerlink" title="9.3函数外部可以直接访问函数内部的局部变量吗?"></a>9.3函数外部可以直接访问函数内部的局部变量吗?</h5><p>不能,但是可以通过闭包让外部操作操作它</p><h5 id="9-4-闭包的缺点"><a href="#9-4-闭包的缺点" class="headerlink" title="9.4.闭包的缺点:"></a>9.4.闭包的缺点:</h5><p>函数执行后,函数内部的局部变量没有释放,占用内存时间会变长,容易造成内存泄露;</p><p>解决方法:<br>及时释放:  null</p><h5 id="9-5闭包的生命周期"><a href="#9-5闭包的生命周期" class="headerlink" title="9.5闭包的生命周期:"></a>9.5闭包的生命周期:</h5><p>产生:    在嵌套内部函数定义执行完时就产生了(不是在调用)</p><p>死亡:    在嵌套的内部函数成为了垃圾对象时</p><h5 id="9-6闭包的引用-自定义js模块"><a href="#9-6闭包的引用-自定义js模块" class="headerlink" title="9.6闭包的引用:自定义js模块"></a>9.6闭包的引用:自定义js模块</h5><p>将所有的数据和功能封装在一个函数内部<br>如果像外部暴露一个功能可以用方法, 暴露多个用对象包起来;<br>模块的使用者, 只需要通过模块暴露的对象调用方法来实现对应的功能</p><h5 id="10-内存溢出"><a href="#10-内存溢出" class="headerlink" title="10.内存溢出:"></a>10.内存溢出:</h5><p>程序运行的内存超过了剩余的内存空间,就会抛出内存溢出;</p><h5 id="11-内存泄露"><a href="#11-内存泄露" class="headerlink" title="11.内存泄露"></a>11.内存泄露</h5><p>占用的内存没有及时释放,积累多了就会导致内存溢出;</p><h6 id="常见内存泄露"><a href="#常见内存泄露" class="headerlink" title="常见内存泄露:"></a>常见内存泄露:</h6><p>意外的全局变量<br>没有及时清理的定时器或回调函数<br>闭包</p><h5 id="12-递归函数"><a href="#12-递归函数" class="headerlink" title="12.递归函数:"></a>12.递归函数:</h5><p>函数内部自己调用自己, 这个函数就是递归函数;<br>使用递归要加一个退出条件,不然容易出现栈溢出;</p><h5 id="13工厂模式"><a href="#13工厂模式" class="headerlink" title="13工厂模式:"></a>13工厂模式:</h5><p>通过工厂函数模式动态创建对象并返回<br>使用场景:  需要创建多个对象;<br>对象没有一个具体的类型,都是Object;<br>返回一个对象的函数===&gt;工厂函数</p><h5 id="14原型链继承-得到方法"><a href="#14原型链继承-得到方法" class="headerlink" title="14原型链继承:(得到方法)"></a>14原型链继承:(得到方法)</h5><p><img src="../../../../img/8.png" alt="image"></p><h5 id="重点是"><a href="#重点是" class="headerlink" title="重点是:"></a>重点是:</h5><p>1.)子类型的原型是父类型的一个实例对象;</p><p>子类型.prtotype = new 父类型()</p><p>2.)让子类型的原型的construtor重新指回子类型;</p><p>子类型.prototype.constructor = 子类型</p><h5 id="15构造函数-得到属性-原型-得到方法-—-继承最好的用法"><a href="#15构造函数-得到属性-原型-得到方法-—-继承最好的用法" class="headerlink" title="15构造函数 (得到属性) + 原型(得到方法)— 继承最好的用法"></a>15构造函数 (得到属性) + 原型(得到方法)— 继承最好的用法</h5><p>利用call()调用父级的方法</p><p><img src="../../../../img/9.png" alt="image"></p><p><img src="../../../../img/10.png" alt="image"></p><h5 id="16-new一个对象背后做了些什么"><a href="#16-new一个对象背后做了些什么" class="headerlink" title="16.new一个对象背后做了些什么?"></a>16.new一个对象背后做了些什么?</h5><p>*.创建了一个空对象</p><p>*给对象设置_ <em>proto</em> _,值为构造函数对象的prototype属性值</p><p>this._ <em>proto</em> _ = fn.prototype;</p><p>*执行构造函数体(给对象添加属性 / 方法)</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\cl1169451697.github.io\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\cl1169
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>mock</title>
    <link href="https://github.com/cl1169451697/cl1169451697.github.io/2020/07/17/mock/"/>
    <id>https://github.com/cl1169451697/cl1169451697.github.io/2020/07/17/mock/</id>
    <published>2020-07-17T12:39:34.000Z</published>
    <updated>2020-07-17T14:58:47.034Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\cl1169451697.github.io\assets\css\APlayer.min.css"><script src="\cl1169451697.github.io\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><ol><li><p>先安装 mock.js<br>npm install mockjs –save-dev</p></li><li><p>模拟数据接口<br>在项目的<code>src</code>目录下创建一个<code>mock</code>目录，然后在里面新建一个<code>index.js</code>文件，作为mock的导出点，用于提供给<code>src/main.js</code>使用。<br>在<code>src/mock</code>下新建<code>modules</code>目录，里面再新建各种<code>xxx.js</code>，用来模拟各个页面的数据。</p></li><li><p>src目录结构图:<br><a href="https://img2020.cnblogs.com/blog/1977091/202007/1977091-20200717222205078-2072351280.png" target="_blank" rel="noopener"><img src="https://img2020.cnblogs.com/blog/1977091/202007/1977091-20200717222205591-884731908.png" alt="image"></a></p></li><li><p>index.js代码:</p></li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 引入mockjs</span></span><br><span class="line"><span class="keyword">import</span> Mock <span class="keyword">from</span> <span class="string">'mockjs'</span></span><br><span class="line"><span class="comment">// 引入模板函数类</span></span><br><span class="line"><span class="keyword">import</span> ratings <span class="keyword">from</span> <span class="string">'./modules/ratings'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Mock函数</span></span><br><span class="line"><span class="keyword">const</span> &#123; mock &#125; = Mock</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置延时</span></span><br><span class="line">Mock.setup(&#123;</span><br><span class="line">  timeout: <span class="number">400</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用拦截规则拦截命中的请求，mock(url, post/get, 返回的数据);</span></span><br><span class="line">mock(<span class="regexp">/\/api\/ratings\/list/</span>, <span class="string">'post'</span>, ratings.list)</span><br><span class="line"><span class="comment">// mock(/\/api\/ratings\/list/, 'get', ratings.list)</span></span><br></pre></td></tr></table></figure><ol start="5"><li>ratings.js代码:<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 引入随机函数</span></span><br><span class="line"><span class="keyword">import</span> &#123; Random &#125; <span class="keyword">from</span> <span class="string">'mockjs'</span></span><br><span class="line"><span class="comment">// 引入Mock</span></span><br><span class="line"><span class="keyword">const</span> Mock = <span class="built_in">require</span>(<span class="string">'mockjs'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义数据</span></span><br><span class="line"><span class="keyword">const</span> listData = Mock.mock(&#123;</span><br><span class="line">  <span class="string">'data|20'</span>: [&#123;</span><br><span class="line">    username: <span class="function"><span class="params">()</span> =&gt;</span> Random.cname(),</span><br><span class="line">    time: <span class="function"><span class="params">()</span> =&gt;</span> Random.date(<span class="string">'yyyy.M.d'</span>),</span><br><span class="line">    content: <span class="function"><span class="params">()</span> =&gt;</span> Random.csentence(<span class="number">5</span>, <span class="number">10</span>)</span><br><span class="line">  &#125;]</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">list</span> (<span class="params">res</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// res是一个请求对象，包含: url, type, body</span></span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    code: <span class="number">200</span>,</span><br><span class="line">    data: listData.data,</span><br><span class="line">    message: <span class="string">'请求成功'</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123; list &#125;</span><br></pre></td></tr></table></figure></li></ol><ol start="6"><li><p>mockjs使用Random方法生成随机数据的规则 <a href="https://github.com/nuysoft/Mock/wiki/Mock.Random">官方文档</a></p></li><li><p>main.js中引入模拟数据接口:<br>在 src/main.js 中需要加入以下代码</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">'@/mock'</span></span><br></pre></td></tr></table></figure></li><li><p>安装axios  npm install axios</p></li><li><p>main.js中引入axios</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">'axios'</span></span><br><span class="line"><span class="comment">// 配置axios 到原型中</span></span><br><span class="line">Vue.prototype.$axios = axios</span><br></pre></td></tr></table></figure></li><li><p>main.js完整代码:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">'./App.vue'</span></span><br><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">'./router'</span></span><br><span class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">'./store'</span></span><br><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">'axios'</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">'@/mock'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Vue.prototype.$axios = axios</span><br><span class="line">Vue.config.productionTip = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  router,</span><br><span class="line">  store,</span><br><span class="line">  render: <span class="function"><span class="params">h</span> =&gt;</span> h(App)</span><br><span class="line">&#125;).$mount(<span class="string">'#app'</span>)</span><br></pre></td></tr></table></figure></li></ol><ol start="11"><li><p>页面使用:<br><a href="https://img2020.cnblogs.com/blog/1977091/202007/1977091-20200717223419796-1548627817.png" target="_blank" rel="noopener"><img src="https://img2020.cnblogs.com/blog/1977091/202007/1977091-20200717223420249-885165101.png" alt="image"></a></p></li><li><p>打印数据:<br><a href="https://img2020.cnblogs.com/blog/1977091/202007/1977091-20200717223420671-983537329.png" target="_blank" rel="noopener"><img src="https://img2020.cnblogs.com/blog/1977091/202007/1977091-20200717223420966-244168936.png" alt="image"></a></p></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\cl1169451697.github.io\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\cl1169
      
    
    </summary>
    
    
      <category term="学习" scheme="https://github.com/cl1169451697/cl1169451697.github.io/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="mock" scheme="https://github.com/cl1169451697/cl1169451697.github.io/tags/mock/"/>
    
  </entry>
  
  <entry>
    <title>computed 和 watch</title>
    <link href="https://github.com/cl1169451697/cl1169451697.github.io/2020/07/15/%E5%88%9D%E6%AC%A1/"/>
    <id>https://github.com/cl1169451697/cl1169451697.github.io/2020/07/15/%E5%88%9D%E6%AC%A1/</id>
    <published>2020-07-15T13:52:57.000Z</published>
    <updated>2020-07-16T03:53:00.791Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\cl1169451697.github.io\assets\css\APlayer.min.css"><script src="\cl1169451697.github.io\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="computed"><a href="#computed" class="headerlink" title="computed:"></a>computed:</h3><p>计算属性，依赖其它属性值，并且 computed 的值有缓存，只有它依赖的属性值发生改变，下一次获取 computed 的值时才会重新计算 computed 的值；</p><h3 id="watch"><a href="#watch" class="headerlink" title="watch:"></a>watch:</h3><p>监听器:更多的是「观察」的作用，类似于某些数据的监听回调 ，每当监听的数据变化时都会执行回调进行后续操作；</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\cl1169451697.github.io\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\cl1169
      
    
    </summary>
    
    
      <category term="学习" scheme="https://github.com/cl1169451697/cl1169451697.github.io/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="computed | watch" scheme="https://github.com/cl1169451697/cl1169451697.github.io/tags/computed-watch/"/>
    
  </entry>
  
  <entry>
    <title>hexo基本配置</title>
    <link href="https://github.com/cl1169451697/cl1169451697.github.io/2020/07/14/%E6%89%93%E5%BC%80/"/>
    <id>https://github.com/cl1169451697/cl1169451697.github.io/2020/07/14/%E6%89%93%E5%BC%80/</id>
    <published>2020-07-14T15:31:25.000Z</published>
    <updated>2020-07-16T03:44:43.432Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\cl1169451697.github.io\assets\css\APlayer.min.css"><script src="\cl1169451697.github.io\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="hexo文档"><a href="#hexo文档" class="headerlink" title="hexo文档"></a>hexo文档</h2><p><a href="https://hexo.bootcss.com/docs/" target="_blank" rel="noopener">https://hexo.bootcss.com/docs/</a> </p><h2 id="安装hexo"><a href="#安装hexo" class="headerlink" title="安装hexo:"></a>安装hexo:</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure><h2 id="初始化"><a href="#初始化" class="headerlink" title="初始化:"></a>初始化:</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo init blog</span><br></pre></td></tr></table></figure><h2 id="启动"><a href="#启动" class="headerlink" title="启动:"></a>启动:</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo s</span><br></pre></td></tr></table></figure><h2 id="生成文件"><a href="#生成文件" class="headerlink" title="生成文件"></a>生成文件</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo g</span><br></pre></td></tr></table></figure><h2 id="更新仓库"><a href="#更新仓库" class="headerlink" title="更新仓库"></a>更新仓库</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo d</span><br></pre></td></tr></table></figure><h2 id="清除缓存"><a href="#清除缓存" class="headerlink" title="清除缓存:"></a>清除缓存:</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br></pre></td></tr></table></figure><h2 id="关联git"><a href="#关联git" class="headerlink" title="关联git:"></a>关联git:</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cnpm install --save hexo-deployer-git</span><br></pre></td></tr></table></figure><h2 id="配置config文件"><a href="#配置config文件" class="headerlink" title="配置config文件:"></a>配置config文件:</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">type: git</span><br><span class="line">repo: https:&#x2F;&#x2F;gitee.com&#x2F;cl1169451697&#x2F;chenlong.git</span><br><span class="line">branch: master</span><br></pre></td></tr></table></figure><h2 id="配置-config文件"><a href="#配置-config文件" class="headerlink" title="配置_config文件"></a>配置_config文件</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">root: chenlong.git</span><br><span class="line">url: https:&#x2F;&#x2F;gitee.com&#x2F;cl1169451697&#x2F;chenlong.git</span><br></pre></td></tr></table></figure><h2 id="常用博客样式"><a href="#常用博客样式" class="headerlink" title="常用博客样式:"></a>常用博客样式:</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;github.com&#x2F;litten&#x2F;hexo-theme-yilia</span><br><span class="line">git clone https:&#x2F;&#x2F;gitee.com&#x2F;cl1169451697&#x2F;hexo-theme-BlueLake.git themes&#x2F;yilia</span><br></pre></td></tr></table></figure><h2 id="修改-config-yml"><a href="#修改-config-yml" class="headerlink" title="修改_config.yml:"></a>修改_config.yml:</h2><p>themes: 设置为下载的主题名字</p><h2 id="创建笔记"><a href="#创建笔记" class="headerlink" title="创建笔记"></a>创建笔记</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new &quot;记录&quot;</span><br></pre></td></tr></table></figure><h2 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">title: BlueLake博客主题的详细配置</span><br><span class="line">tags: [hexo,BlueLake] &#x2F;&#x2F; 标签</span><br><span class="line">categories: Hexo博客折腾  &#x2F;&#x2F; 分类</span><br><span class="line">top: true &#x2F;&#x2F; 置顶</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\cl1169451697.github.io\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\cl1169
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://github.com/cl1169451697/cl1169451697.github.io/2020/07/14/hello-world/"/>
    <id>https://github.com/cl1169451697/cl1169451697.github.io/2020/07/14/hello-world/</id>
    <published>2020-07-14T12:08:21.546Z</published>
    <updated>2020-07-14T12:08:21.546Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
    
  </entry>
  
</feed>
